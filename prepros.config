integrateHH(parentScope, edit) {
        // Controller for Publish vacancy pop-up
        class PublishVacancyController {
            constructor(parent, $uibModalInstance, $translate, hhVacancyPostingService, $scope, $uibModal, notificationService, Vacancy, $location, $rootScope, editFlag, $state, $timeout) {
                this.parent = parent;
                this.$uibModalInstance = $uibModalInstance;
                this.$translate = $translate;
                this.hhVacancyPostingService = hhVacancyPostingService;
                this.$scope = $scope;
                this.$uibModal = $uibModal;
                this.notificationService = notificationService;
                this.vacancyService = Vacancy;
                this.$location = $location;
                this.$rootScope = $rootScope;
                this.editFlag = editFlag;
                this.$state = $state;
                self = this;
                this.$timeout = $timeout;
            }

            // Initial model
            _initModel() {
                this.model = {
                    isIntegrationEnabled: false,
                    showAdditionalInfo: false,
                    specifyContacts: false,
                    vacancy: this.parent.vacancy,
                    specializationList: [],
                    subcategoryList: [],
                    specialization: null,
                    subcategory: [],
                    departments: null,
                    areas: {
                        areaList: [],
                        cityList: [],
                        country: [],
                        city: []
                    },
                    billing: this.hhVacancyPostingService.getBillingTypes(this.$translate.use()),
                    vacancyType: this.hhVacancyPostingService.getVacancyTypes(this.$translate.use()),
                    employmentTypeList: this.hhVacancyPostingService.getEmploymentType(this.$translate.use()),
                    scheduleList: this.hhVacancyPostingService.getSchedule(this.$translate.use()),
                    experienceList: this.hhVacancyPostingService.getExperience(this.$translate.use()),
                    currencyList: this.hhVacancyPostingService.getCurrency(this.$translate.use()),
                    currency: "USD",
                    contacts: {
                        name: null,
                        email: null,
                        phones: {
                            country: null,
                            city: null,
                            number: null,
                        },
                    },
                }
            }

            _setCompareEmploymentType() {
                this.exportedDate.employment = this.hhVacancyPostingService.getCompareEmploymentType(this.$translate.use(), this.parent.vacancy.employmentType);
            }

            // Initial data for export
            _initExportedData() {
                this.exportedDate = {
                    name: this.parent.vacancy.position,
                    vacancy_id: this.parent.vacancy.vacancyId,
                    specializations: [],
                    area: {id: null},
                    billing_type: null,
                    type: null,
                    description: this.parent.vacancy.descr,
                    employment: null,
                    department: null,
                    schedule: null,
                    experience: null,
                    salary: {
                        from: this.parent.vacancy.hhInfo && this.parent.vacancy.hhInfo.salary && this.parent.vacancy.hhInfo.salary.from ? this.parent.vacancy.hhInfo.salary.from : this.parent.vacancy.salaryFrom || null,
                        to: this.parent.vacancy.hhInfo && this.parent.vacancy.hhInfo.salary && this.parent.vacancy.hhInfo.salary.to ? this.parent.vacancy.hhInfo.salary.to : this.parent.vacancy.salaryTo || null,
                        currency: this.parent.vacancy.hhInfo && this.parent.vacancy.hhInfo.salary ? this.parent.vacancy.hhInfo.salary.currency : this.parent.vacancy.currency ? this.parent.vacancy.currency : 'USD'
                    },
                };
            }

            // Initial object for validation error
            _initErrorFieldsObject() {
                this.errorFieldsObject = {
                    name: false,
                    specializations: false,
                    subcategory: false,
                    country: false,
                    area: false,
                    billing_type: false,
                    type: false,
                    department: false,
                    description: false,
                    specifyContacts: {
                        name: false,
                        contacts: {
                            country: false,
                            city: false,
                            number: false,
                            email: false,
                        }
                    }
                }
            }

            // Method for get specialization list from HH
            _getSpecializationList() {
                const lang = this.$translate.use() === 'ru' ? 'RU' : 'EN';
                return this.hhVacancyPostingService.getSpecializations(lang)
                    .then(data => {
                        this.model.specializationList = data;
                        if (this.editFlag) {
                            this.model.specialization = this.hhVacancyPostingService.findSpecialization(this.parent.vacancy.hhInfo.specializations[0].id, data);
                            this.exportedDate.specializations = this.parent.vacancy.hhInfo.specializations;
                            this.model.subcategoryList = this.model.specialization.specializations;
                        }
                    })
            };

            _setBillingType() {
                if (this.editFlag) this.exportedDate.billing_type = this.model.billing.filter(el => el.id === this.parent.vacancy.hhInfo.billing_type.id)[0];
            }

            _setVacancyType() {
                if (this.editFlag) this.exportedDate.type = this.model.vacancyType.filter(el => el.id === this.parent.vacancy.hhInfo.type.id)[0];
            }

            _setEmploymentType() {
                if (this.editFlag) this.exportedDate.employment = this.model.employmentTypeList.filter( el => el.id === this.parent.vacancy.hhInfo.employment.id)[0];
            }

            _setSchedule() {
                if (this.editFlag) this.exportedDate.schedule = this.model.scheduleList.filter(el => el.id === this.parent.vacancy.hhInfo.schedule.id)[0];
            }

            _setExperience() {
                if (this.editFlag) this.exportedDate.experience = this.model.experienceList.filter(el => el.id === this.parent.vacancy.hhInfo.experience.id)[0];
            }

            _setContacts() {
                if (this.editFlag && this.parent.vacancy.hhInfo.contacts) {
                    this.model.contacts = {...this.parent.vacancy.hhInfo.contacts};
                    this.model.contacts.phones = this.model.contacts.phones[0];
                    for (let key in this.model.contacts.phones) this.model.contacts.phones[key] = parseInt(this.model.contacts.phones[key],10);
                    this.model.specifyContacts = true;
                    this.model.disableContactsSwitcher = true;
                }
            }

            // Method for get area list from HH and our API
            _getAreaList() {
                const lang = this.$translate.use() === 'ru' ? 'RU' : 'EN';
                return self.hhVacancyPostingService.getAreas(lang, self.model.vacancy.vacancyId)
                    .then(data => {
                        // Set areas from HH to model
                        self.model.areas.areaList = data.areasFromHH;

                        // If there is edit publish modal
                        if (!this.editFlag) {
                            // If vacancy region is match with HH regions
                            if (data.vacancyAreaId) {
                                const city = self.hhVacancyPostingService.findArea(data.vacancyAreaId, data.areasFromHH),
                                    country = self.hhVacancyPostingService.findArea(city.parent_id || city.id, data.areasFromHH);

                                // In case there is a city there isn`t only a country, but also an area
                                let area;

                                if (country.parent_id) area = self.hhVacancyPostingService.findArea(country.parent_id, data.areasFromHH);

                                self.model.areas.cityList = country.areas;
                                self.model.areas.country = area ? area.id : country.id;
                                self.exportedDate.area.id = city.id;
                            }
                        } else {
                            const city = self.hhVacancyPostingService.findArea(self.parent.vacancy.hhInfo.area.id, self.model.areas.areaList),
                                country = self.hhVacancyPostingService.findArea(city.parent_id || city.id, self.model.areas.areaList);
                            // In case there is a city there isn`t only a country, but also an area
                            let area;

                            if (country.parent_id) area = self.hhVacancyPostingService.findArea(country.parent_id, data.areasFromHH);

                            self.model.areas.cityList = country.areas;
                            self.model.areas.country = area ? area.id : country.id;
                            self.exportedDate.area.id = city.id;
                        }

                    })
            }

            //Method for get company departments
            _getDepartmentsList(){
                return self.hhVacancyPostingService.getDepartments()
                    .then(resp => {
                        if(resp.status === 'ok'){
                            self.model.departments = resp.objects || [];
                        } else {
                            console.error(resp);
                        }
                    })
            }

            // Method for validation email
            _validateEmail(email) {
                const re = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
                if (this.model.contacts.email !== "" && this.model.contacts.email !== null) {
                    const test = re.test(String(email).toLowerCase());
                    if (test) {
                        this.errorFieldsObject.specifyContacts.contacts.email = false;
                        return true;
                    }
                    else {
                        this.errorFieldsObject.specifyContacts.contacts.email = true;
                        return false;
                    }
                } else {
                    this.errorFieldsObject.specifyContacts.contacts.email = false;
                    return true;
                }
            }

            // Method that set customFields with values to fieldValues
            _setCustomFields() {
                if (this.model.vacancy.customFields) {
                    this.model.vacancy.fieldValues = [];
                    angular.forEach(this.model.vacancy.customFields, val => {
                        if(val.fieldValue){
                            if (angular.equals(val.type, "string")) {
                                this.model.vacancy.fieldValues.push({
                                    objType: "vacancy",
                                    fieldValueId: val.fieldValue.fieldValueId,
                                    value:  val.fieldValue.value,
                                    field: {
                                        fieldId: val.fieldId
                                    }
                                });
                            }
                            if (angular.equals(val.type, "select")) {
                                this.model.vacancy.fieldValues.push({
                                    objType: "vacancy",
                                    fieldValueId: val.fieldValue.fieldValueId,
                                    value:  val.fieldValue.value,
                                    field: {
                                        fieldId: val.fieldId
                                    }
                                });
                            }
                            if (angular.equals(val.type, "date")) {
                                this.model.vacancy.fieldValues.push({
                                    objType: "vacancy",
                                    fieldValueId: val.fieldValue.fieldValueId,
                                    dateTimeValue: val.fieldValue.dateTimeValue,
                                    field: {
                                        fieldId: val.fieldId
                                    }
                                });
                            }
                            if (angular.equals(val.type, "datetime")) {
                                this.model.vacancy.fieldValues.push({
                                    objType: "vacancy",
                                    fieldValueId: val.fieldValue.fieldValueId,
                                    dateTimeValue: val.fieldValue.dateTimeValue,
                                    field: {
                                        fieldId: val.fieldId
                                    }
                                });
                            }
                        }
                    });
                }
            }

            // Method for reset all properties in ErrorObject to false
            _resetErrorObject(obj) {
                for (let key in obj) {
                    if (obj[key] === Object(obj[key])) this._resetErrorObject(obj[key]);
                    else obj[key] = false;
                }
            }

            _setInvalidSpecifyFieldToErrorObject(fieldName) {
                if (fieldName !== 'name') {
                    for (let key in this.errorFieldsObject.specifyContacts.contacts) {
                        this.errorFieldsObject.specifyContacts.contacts[key] = key === fieldName;
                    }
                    this.errorFieldsObject.specifyContacts.name = false;
                } else {
                    this.errorFieldsObject.specifyContacts.name = true;
                    for (let key in this.errorFieldsObject.specifyContacts.contacts) {
                        this.errorFieldsObject.specifyContacts[key] = false;
                    }
                }
            }

            _setInvalidFieldToErrorObject(fieldKey, specifyContacts = false) {
                if (specifyContacts) {
                    this._setInvalidSpecifyFieldToErrorObject(fieldKey);
                } else {
                    for (let key in this.errorFieldsObject) {
                        if (key !== 'specifyContacts') this.errorFieldsObject[key] = key === fieldKey;
                    }
                }
            }

            _setContactsToExportedData() {
                this.exportedDate.contacts = {
                    name: null,
                    email: null,
                    phones: [],
                };
                this.exportedDate.contacts.name = this.model.contacts.name;
                this.exportedDate.contacts.phones.push({
                    country: this.model.contacts.phones.country,
                    city: this.model.contacts.phones.city,
                    number: this.model.contacts.phones.number
                });
                if (this.model.contacts.email) this.exportedDate.contacts.email = this.model.contacts.email;
            }

            _validateFields() {
                if (this.exportedDate.name.length === 0) this._setInvalidFieldToErrorObject('name');
                else if (!this.model.specialization) this._setInvalidFieldToErrorObject('specializations');
                else if (this.model.departments && this.model.departments.length && !this.exportedDate.department) this._setInvalidFieldToErrorObject('department');
                else if (this.exportedDate.specializations.length === 0) this._setInvalidFieldToErrorObject('subcategory');
                else if (this.model.areas.country.length === 0) this._setInvalidFieldToErrorObject('country');
                else if (this.exportedDate.area.id === null) this._setInvalidFieldToErrorObject('area');
                else if (!this.editFlag && this.exportedDate.billing_type === null) this._setInvalidFieldToErrorObject('billing_type');
                else if (!this.editFlag && this.exportedDate.type === null) this._setInvalidFieldToErrorObject('type');
                else if (!this.exportedDate.description) this._setInvalidFieldToErrorObject('description');
                else {
                    if (!this.model.specifyContacts) {
                        this._resetErrorObject(this.errorFieldsObject);
                        return true;
                    }
                    else {
                        this._resetErrorObject(this.errorFieldsObject);
                        if (!this.model.contacts.name) this._setInvalidFieldToErrorObject('name', true);
                        else if (!this.model.contacts.phones.country) this._setInvalidFieldToErrorObject('country', true);
                        else if (!this.model.contacts.phones.city) this._setInvalidFieldToErrorObject('city', true);
                        else if(!this.model.contacts.phones.number) this._setInvalidFieldToErrorObject('number', true);
                        else {
                            this._setContactsToExportedData('', true);
                            return true;
                        }
                    }
                }
            }

            setCurrency(curr) {
                if (self.exportedDate.salary.currency !== curr.code) self.$timeout(() => self.exportedDate.salary.currency = curr.code, 0);
            }

            // Method for publish vacancy to HH
            publishVacancy() {
                this.$rootScope.loading = true;
                const   fieldsAreValidate       = this._validateFields()                            || false,
                    emailIsValid            = this.model.specifyContacts ? this._validateEmail(this.model.contacts.email)    || false : true,
                    generalFieldsChanged    = [];
                if (this.model.vacancy.position !== this.exportedDate.name)  generalFieldsChanged.push('position');
                if (this.model.vacancy.descr !== this.exportedDate.description)  generalFieldsChanged.push('description');

                // Controller for approving main fields changed
                class ApproveChangesController {
                    constructor(model, exportedDate, $uibModalInstance, $translate, generalFieldsChanged, hhVacancyPostingService, notificationService, Vacancy, $location, $rootScope, $scope, parentModal, $state, editFlag, testFn) {
                        this.model = model;
                        this.exportedDate = exportedDate;
                        this.$uibModalInstance = $uibModalInstance;
                        this.$translate = $translate;
                        this.descriptionChanged = generalFieldsChanged.indexOf('description') !== -1 || null;
                        this.positionChanged = generalFieldsChanged.indexOf('position') !== -1 || null;
                        this.hhVacancyPostingService = hhVacancyPostingService;
                        this.notificationService = notificationService;
                        this.vacancyService = Vacancy;
                        this.$location = $location;
                        this.$rootScope = $rootScope;
                        this.$scope = $scope;
                        this.parentModal = parentModal;
                        this.$state = $state;
                        this.editFlag = editFlag
                        this.testFn = testFn
                        self = this;
                    }
                    closeModal() {
                        this.$uibModalInstance.close();
                        this.parentModal.close();
                    }
                    _saveChanges() {
                        const objToSave = angular.copy(this.model.vacancy);

                        if (this.descriptionChanged && this.checkedItems.descr) {
                            objToSave.descr = this.exportedDate.description;
                        }
                        if (this.positionChanged && this.checkedItems.position) {
                            objToSave.position = this.exportedDate.name;
                        }
                        delete objToSave.hhInfo;

                        objToSave.category = {category: objToSave.category} || {};
                        return this.vacancyService.onEditVacancy(objToSave)
                    };
                    log() {
                        console.log('exp data', this.exportedDate);
                        console.log('model', this.model);
                    }
                    _publishVacancy() {
                        if (this.editFlag) {
                            return new Promise((resolve, reject) => {
                                delete this.exportedDate.billing_type;
                                delete this.exportedDate.type;
                                this.hhVacancyPostingService.editVacancy(this.exportedDate)
                                    .then( (resp) => {
                                        this.closeModal();
                                        this.$rootScope.loading = false;
                                        this.notificationService.success(this.$translate.instant("Vacancy successfully edited", {vacancyName: this.exportedDate.name}));
                                        resolve(resp);
                                    })
                                    .catch( err => {
                                        this.notificationService.error(err.message);
                                        this.$rootScope.loading = false;
                                        this.$scope.$$phase || this.$scope.$apply();
                                        this.closeModal();
                                        reject(err);
                                    })
                            })
                        } else {
                            this.hhVacancyPostingService.publishVacancy(this.exportedDate)
                                .then( () => {
                                    this.$state.go('vacancy', {}, {reload: true});
                                    this.closeModal();
                                    this.$rootScope.loading = false;
                                    this.notificationService.success(this.$translate.instant("Vacancy successfully published", {vacancyName: this.exportedDate.name}));

                                })
                                .catch( err => {
                                    this.notificationService.error(err.message);
                                    this.$rootScope.loading = false;
                                    this.$scope.$$phase || this.$scope.$apply();
                                    if(err.code === 'duplicate') {

                                    }
                                    this.closeModal();
                                })
                        }
                    }
                    async publish(save) {
                        this.$rootScope.loading = true;
                        try {
                            const publish = await this._publishVacancy();
                            if (save && publish.status === 'ok') {
                                const edit = await this._saveChanges();
                                if (edit.status === 'ok') {
                                    this.$state.go('vacancy', {}, {reload: true});
                                }
                            } else {
                                this.$state.go('vacancy', {}, {reload: true});
                            }
                        } catch (e) {
                            this.notificationService.error(e.message);
                            this.$rootScope.loading = false;
                            this.$scope.$$phase || this.$scope.$apply();
                            this.closeModal();
                        }
                    }

                    $onInit() {
                        this.checkedItems = {
                            position: false,
                            descr: false,
                        };
                        this.$rootScope.loading = false;
                    }
                }

                if (generalFieldsChanged.length > 0 && fieldsAreValidate) {
                    if (emailIsValid) {
                        // Opening approving changes and publish vacancy modal
                        this.$uibModal.open({
                            templateUrl:"partials/modal/jobSitesIntegration/approveChanges.html",
                            controller: ['model', 'exportedDate','$uibModalInstance', '$translate', 'generalFieldsChanged', 'hhVacancyPostingService', 'notificationService', 'Vacancy', '$location', '$rootScope', '$scope', 'parentModal', '$state', 'editFlag',ApproveChangesController],
                            controllerAs: 'vm',
                            windowClass: "approveChanges-hh-popup",
                            resolve: {
                                model: () => {return self.model},
                                exportedDate: () => {return self.exportedDate},
                                $translate: () => { return self.$translate},
                                generalFieldsChanged: () => {return generalFieldsChanged},
                                hhVacancyPostingService: () => { return self.hhVacancyPostingService},
                                notificationService: () => { return self.notificationService},
                                Vacancy: () => { return self.vacancyService},
                                $location: () => { return self.$location},
                                $rootScope: () => { return self.$rootScope},
                                parentModal: () => { return self.$uibModalInstance},
                                $state: () => { return self.$state},
                                editFlag: () => { return self.editFlag}
                            }
                        });
                    }
                    else {
                        this.notificationService.error(this.$translate.instant('wrong_email'));
                        this.$rootScope.loading = false;
                    }
                }
                else if (fieldsAreValidate){
                    if (emailIsValid) {
                        if (this.editFlag) {
                            delete this.exportedDate.billing_type;
                            delete this.exportedDate.type;
                            this.hhVacancyPostingService.editVacancy(this.exportedDate)
                                .then( () => {
                                    this.$state.go('vacancy', {}, {reload: true});
                                    this.closeModal();
                                    this.$rootScope.loading = false;
                                    this.notificationService.success(this.$translate.instant("Vacancy successfully edited", {vacancyName: this.exportedDate.name}));
                                })
                                .catch( err => {
                                    this.notificationService.error(err.message);
                                    this.$rootScope.loading = false;
                                    this.$scope.$$phase || this.$scope.$apply();
                                })
                        } else {
                            this.hhVacancyPostingService.publishVacancy(this.exportedDate)
                                .then( () => {
                                    this.$state.go('vacancy', {}, {reload: true});
                                    this.closeModal();
                                    this.$rootScope.loading = false;
                                    this.notificationService.success(this.$translate.instant("Vacancy successfully published", {vacancyName: this.exportedDate.name}));
                                })
                                .catch( err => {
                                    this.notificationService.error(err.message);
                                    this.$rootScope.loading = false;
                                    this.$scope.$$phase || this.$scope.$apply();
                                })
                        }
                    }
                    else {
                        this.notificationService.error(this.$translate.instant('wrong_email'));
                        this.$rootScope.loading = false;
                    }
                }
                else {
                    this.notificationService.error(this.$translate.instant('You should fill all obligatory fields.'));
                    this.$rootScope.loading = false;
                }
            }

            // Method for get subcategory list when specialization has changed
            selectSpecialization(specialization) {
                self.model.subcategoryList = specialization.specializations;
                self.exportedDate.specializations = [];
            }

            // Method for get cities list when typework is "telework" and country has changed
            getCities() {
                const country = self.hhVacancyPostingService.findArea(self.model.areas.country, self.model.areas.areaList);
                self.model.areas.cityList = country.areas;
                if (self.model.areas.country === '1001') self.otherCountriesSelected = true;
                self.$scope.$$phase || self.$scope.$apply();
            }

            _initListeners() {
                this.$scope.$watch(this.model.areas.country, (newVal, oldVal) => {
                    if (newVal !== oldVal) this.exportedDate.area.id = null;
                });
            }

            specifyContactsChangeDetection() {
                if (!this.model.specifyContacts) {
                    this._resetContacts(this.model.contacts);
                    this._resetContacts(this.exportedDate.contacts);
                }
            }

            _resetContacts(obj) {
                for (let key in obj) {
                    if (obj[key] === Object(obj[key])) this._resetContacts(obj[key]);
                    else obj[key] = null;
                }
            }

            switchAdditionalInfo() {
                this.model.showAdditionalInfo = !this.model.showAdditionalInfo;
            }

            closeModal() {
                this.$uibModalInstance.close();
            }

            $onInit() {
                Promise.all([
                    this._initModel(),
                    this._initExportedData(),
                    this._getSpecializationList(),
                    this._getAreaList(),
                    this._initListeners(),
                    this._initErrorFieldsObject(),
                    this._setCustomFields(),
                    this._getDepartmentsList()
                ]).then( () => {
                    this._setCompareEmploymentType();
                    this._setBillingType();
                    this._setVacancyType();
                    this._setEmploymentType();
                    this._setExperience();
                    this._setSchedule();
                    this._setContacts();
                    this.$scope.$$phase || this.$scope.$apply();
                })
            }

            logExportedData() {
                console.log(this.exportedDate);
                console.log(this.model);
            }
        }

        openPublishModal(this, edit);

        // Function for open publish vacancy modal
        function openPublishModal(self, editFlag) {
            const modalInstance = self.$uibModal.open({
                templateUrl:"partials/modal/jobSitesIntegration/hh/publishVacancyHH.html",
                controller: ['parent', '$uibModalInstance', '$translate', 'hhVacancyPostingService', '$scope', '$uibModal', 'notificationService', 'Vacancy', '$location', '$rootScope', 'editFlag', '$state', '$timeout',PublishVacancyController],
                controllerAs: 'vm',
                windowClass: "publish-hh-popup",
                resolve: {
                    parent: () => {return self.parent},
                    $translate: () => { return self.$translate},
                    hhVacancyPostingService: () => { return self.hhVacancyPostingService},
                    $uibModal: () => { return self.$uibModal},
                    notificationService: () => { return self.notificationService},
                    Vacancy: () => { return self.vacancyService},
                    $location: () => { return self.$location},
                    $rootScope: () => { return self.$rootScope},
                    editFlag: () => { return editFlag},
                    $state: () => { return self.$state},
                    $timeout: () => { return self.$timeout},
                }
            });
            modalInstance.closed.then(() => {
                if (!editFlag) self.isIntegrationEnabled = false;
            })
        }
    }
